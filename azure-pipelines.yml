trigger: none
pr: none
pool:
  vmImage: ubuntu-latest
resources:
  pipelines:
    - pipeline: testv3
      source: azure-iot-platform-dotnet.ci.test-v3
      trigger:
        branches:
          - master
variables:
  - name: imageTag
    value: $(resources.pipeline.testv3.runID)

jobs:
- job: bumpPatchVersion
  displayName: Auto bump Patch Version
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
    displayName: Checkout repository
    persistCredentials: true

  - pwsh: |-
        # Write your commands here
        $previousVersion = git for-each-ref --sort=-creatordate --format '%(tag)' refs/tags | Select-Object -First 1
        $semVerRegex = [regex]::new('^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<metadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$')
        $previousVersionMatch = $semVerRegex.Match($PreviousVersion)
        $previousMajor = [int]$previousVersionMatch.Groups['major'].Value
        $previousMinor = [int]$previousVersionMatch.Groups['minor'].Value
        $previousPatch = [int]$previousVersionMatch.Groups['patch'].Value
        $previousPrerelease = $previousVersionMatch.Groups['prerelease'].Value
        $previousMetadata = $previousVersionMatch.Groups['metadata'].Value
        $newPatch= $previousPatch+1
        git config user.name "SrikanthPandanaboina"
        git config user.email srikanth.pandanaboina39@gmail.com
        echo Source Version: $(Build.SourceVersion)
        $tags = git tag --points-at $(Build.SourceVersion)
        echo tags: $tags
        $noTags = $tags.Count -lt 1
        if ( $noTags )
        {
          $semVer="$($previousMajor).$($previousMinor).$($newPatch)"
          echo New Version: $semVer
          git tag --annotate $semVer --message 'My version'
          git push origin --tags
          echo "##vso[task.setvariable variable=semVer]$semVer"
        }
        else
        {
          echo "Tag already exists"
        }
        echo "##vso[task.setvariable variable=Proceed]$noTags"
    name: pushTag
  - task: GitHubRelease@1
    displayName: GitHub release (create)
    condition: eq(dependencies.bumpPatchVersion.outputs['pushTag.Proceed'], 'True')
    inputs:
      gitHubConnection: d40ecbeb-33bd-451f-84d2-2c5ca69ffd37
...
