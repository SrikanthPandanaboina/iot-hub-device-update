trigger: none
pr: none
pool:
  vmImage: ubuntu-latest
resources:
  pipelines:
    - pipeline: testv3
      source: azure-iot-platform-dotnet.ci.test-v3
      trigger:
        branches:
          - master
variables:
  - template: variables-all.yaml
  - name: semVerMetaBuild
    value: $(resources.pipeline.testv3.runID)

jobs:
- job: bumpPatchVersionTag
  displayName: Auto bump Patch Version
  pool:
    vmImage: ubuntu-latest
  steps:
  - checkout: self
    displayName: Checkout repository
    persistCredentials: true

  - pwsh: |-
        # Write your commands here
        $previousVersion = git for-each-ref --sort=-creatordate --format '%(tag)' refs/tags | Select-Object -First 1
        $semVerRegex = [regex]::new('^(?<major>0|[1-9]\d*)\.(?<minor>0|[1-9]\d*)\.(?<patch>0|[1-9]\d*)(?:-(?<prerelease>(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*)(?:\.(?:0|[1-9]\d*|\d*[a-zA-Z-][0-9a-zA-Z-]*))*))?(?:\+(?<metadata>[0-9a-zA-Z-]+(?:\.[0-9a-zA-Z-]+)*))?$')
        $previousVersionMatch = $semVerRegex.Match($PreviousVersion)
        $previousMajor = [int]$previousVersionMatch.Groups['major'].Value
        $previousMinor = [int]$previousVersionMatch.Groups['minor'].Value
        $previousPatch = [int]$previousVersionMatch.Groups['patch'].Value
        $previousPrerelease = $previousVersionMatch.Groups['prerelease'].Value
        $previousMetadata = $previousVersionMatch.Groups['metadata'].Value
        $newPatch= $previousPatch+1
        git config user.name "SrikanthPandanaboina"
        git config user.email srikanth.pandanaboina39@gmail.com
        echo Source Version: $(Build.SourceVersion)
        $tags = git tag --points-at $(Build.SourceVersion)
        echo tags: $tags
        $noTags = $tags.Count -lt 1
        if ( $noTags )
        {
          $semVer="$($previousMajor).$($previousMinor).$($newPatch)"
          echo New Version: $semVer
          git tag --annotate $semVer --message 'My version'
          git push origin --tags
          echo "##vso[task.setvariable variable=semVer;isOutput=true]$semVer"
          echo "##vso[task.setvariable variable=Proceed;isOutput=true]Yes"
        }
        else
        {
          echo "Tag already exists"
        }
    name: pushTag

- job: tagImages
  displayName: Tag Docker Images
  dependsOn: bumpPatchVersionTag
  variables:
  - name: semVer
    value: $[ dependencies.bumpPatchVersionTag.outputs['pushTag.semVer'] ]
  - name: semVerMeta
    value: $(semVer)+$(Build.SourceVersion).$(semVerMetaBuild)
  condition: eq(dependencies.bumpPatchVersionTag.outputs['pushTag.Proceed'], 'Yes')
  strategy:
    matrix:
      asa-manager:
        serviceName: asa-manager
      config:
        serviceName: config
      device-telemetry:
       serviceName: device-telemetry
      diagnostics:
       serviceName: diagnostics
      identity-gateway:
        serviceName: identity-gateway
      iothub-manager:
        serviceName: iothub-manager
      reverse-proxy:
        serviceName: reverse-proxy
      storage-adapter:
        serviceName: storage-adapter
      tenant-manager:
        serviceName: tenant-manager
      webui:
        serviceName: webui
  steps:
    - checkout: none
    - task: Docker@2
      displayName: Pull image
      inputs:
        containerRegistry: $(dockerHubServiceConnectionName)
        command: pull
        arguments: $(dockerHubRepositoryName)/$(serviceName):$(semVerMetaBuild)
    - task: Docker@2
      displayName: Apply version tag
      inputs:
        containerRegistry: $(dockerHubServiceConnectionName)
        command: tag
        arguments: $(dockerHubRepositoryName)/$(serviceName):$(semVerMetaBuild) $(dockerHubRepositoryName)/$(serviceName):$(semVer)

    - bash: |-
       echo semVerMetaBuild(test pipeline runID): $semVerMetaBuild
       echo semVerMetaDocker: $semVerMetaDocker
       semVerMetaDocker=$(echo '$(semVerMeta)' | sed 's/\+/_/g')
       echo "##vso[task.setvariable variable=semVerMetaDocker]$semVerMetaDocker"
      displayName: Adapt SemVer for use as Docker tag
    - task: Docker@2
      displayName: Apply version tag with metadata
      inputs:
       containerRegistry: $(dockerHubServiceConnectionName)
       command: tag
       arguments: $(dockerHubRepositoryName)/$(serviceName):$(semVerMetaBuild) $(dockerHubRepositoryName)/$(serviceName):$(semVerMetaDocker)
    - task: Docker@2
      displayName: Push image
      inputs:
           containerRegistry: $(dockerHubServiceConnectionName)
           repository: $(dockerHubRepositoryName)/$(serviceName)
           command: push
           tags: |-
             $(semVer)
             $(semVerMetaDocker)

- job: release
  displayName: Create GithHub release
  dependsOn: tagImages
  condition: eq(dependencies.bumpPatchVersionTag.outputs['pushTag.Proceed'], 'Yes')
  steps:
  - checkout: self
    displayName: Checkout repository
  - task: GitHubRelease@1
    displayName: GitHub release (create)
    inputs:
      gitHubConnection: d40ecbeb-33bd-451f-84d2-2c5ca69ffd37
...
